// Copyright (C) 1991-2016 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// VENDOR "Altera"
// PROGRAM "Quartus Prime"
// VERSION "Version 16.0.0 Build 211 04/27/2016 SJ Lite Edition"

// DATE "07/22/2016 14:53:23"

// 
// Device: Altera 5CSEMA4U23C6 Package UFBGA672
// 

// 
// This Verilog file should be used for ModelSim-Altera (Verilog) only
// 

`timescale 1 ps/ 1 ps

module lu (
	send,
	a,
	b,
	op_sel);
output 	[3:0] send;
input 	[3:0] a;
input 	[3:0] b;
input 	[1:0] op_sel;

wire gnd;
wire vcc;
wire unknown;

assign gnd = 1'b0;
assign vcc = 1'b1;
assign unknown = 1'bx;

tri1 devclrn;
tri1 devpor;
tri1 devoe;
wire \send[0]~output_o ;
wire \send[1]~output_o ;
wire \send[2]~output_o ;
wire \send[3]~output_o ;
wire \b[0]~input_o ;
wire \op_sel[1]~input_o ;
wire \op_sel[0]~input_o ;
wire \a[0]~input_o ;
wire \m1|Mux3~0_combout ;
wire \b[1]~input_o ;
wire \a[1]~input_o ;
wire \m1|Mux2~0_combout ;
wire \b[2]~input_o ;
wire \a[2]~input_o ;
wire \m1|Mux1~0_combout ;
wire \b[3]~input_o ;
wire \a[3]~input_o ;
wire \m1|Mux0~0_combout ;


cyclonev_io_obuf \send[0]~output (
	.i(\m1|Mux3~0_combout ),
	.oe(vcc),
	.dynamicterminationcontrol(gnd),
	.seriesterminationcontrol(16'b0000000000000000),
	.parallelterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\send[0]~output_o ),
	.obar());
// synopsys translate_off
defparam \send[0]~output .bus_hold = "false";
defparam \send[0]~output .open_drain_output = "false";
defparam \send[0]~output .shift_series_termination_control = "false";
// synopsys translate_on

cyclonev_io_obuf \send[1]~output (
	.i(\m1|Mux2~0_combout ),
	.oe(vcc),
	.dynamicterminationcontrol(gnd),
	.seriesterminationcontrol(16'b0000000000000000),
	.parallelterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\send[1]~output_o ),
	.obar());
// synopsys translate_off
defparam \send[1]~output .bus_hold = "false";
defparam \send[1]~output .open_drain_output = "false";
defparam \send[1]~output .shift_series_termination_control = "false";
// synopsys translate_on

cyclonev_io_obuf \send[2]~output (
	.i(\m1|Mux1~0_combout ),
	.oe(vcc),
	.dynamicterminationcontrol(gnd),
	.seriesterminationcontrol(16'b0000000000000000),
	.parallelterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\send[2]~output_o ),
	.obar());
// synopsys translate_off
defparam \send[2]~output .bus_hold = "false";
defparam \send[2]~output .open_drain_output = "false";
defparam \send[2]~output .shift_series_termination_control = "false";
// synopsys translate_on

cyclonev_io_obuf \send[3]~output (
	.i(\m1|Mux0~0_combout ),
	.oe(vcc),
	.dynamicterminationcontrol(gnd),
	.seriesterminationcontrol(16'b0000000000000000),
	.parallelterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\send[3]~output_o ),
	.obar());
// synopsys translate_off
defparam \send[3]~output .bus_hold = "false";
defparam \send[3]~output .open_drain_output = "false";
defparam \send[3]~output .shift_series_termination_control = "false";
// synopsys translate_on

cyclonev_io_ibuf \b[0]~input (
	.i(b[0]),
	.ibar(gnd),
	.dynamicterminationcontrol(gnd),
	.o(\b[0]~input_o ));
// synopsys translate_off
defparam \b[0]~input .bus_hold = "false";
defparam \b[0]~input .simulate_z_as = "z";
// synopsys translate_on

cyclonev_io_ibuf \op_sel[1]~input (
	.i(op_sel[1]),
	.ibar(gnd),
	.dynamicterminationcontrol(gnd),
	.o(\op_sel[1]~input_o ));
// synopsys translate_off
defparam \op_sel[1]~input .bus_hold = "false";
defparam \op_sel[1]~input .simulate_z_as = "z";
// synopsys translate_on

cyclonev_io_ibuf \op_sel[0]~input (
	.i(op_sel[0]),
	.ibar(gnd),
	.dynamicterminationcontrol(gnd),
	.o(\op_sel[0]~input_o ));
// synopsys translate_off
defparam \op_sel[0]~input .bus_hold = "false";
defparam \op_sel[0]~input .simulate_z_as = "z";
// synopsys translate_on

cyclonev_io_ibuf \a[0]~input (
	.i(a[0]),
	.ibar(gnd),
	.dynamicterminationcontrol(gnd),
	.o(\a[0]~input_o ));
// synopsys translate_off
defparam \a[0]~input .bus_hold = "false";
defparam \a[0]~input .simulate_z_as = "z";
// synopsys translate_on

cyclonev_lcell_comb \m1|Mux3~0 (
// Equation(s):
// \m1|Mux3~0_combout  = (!\op_sel[1]~input_o  & ((!\b[0]~input_o  & (\op_sel[0]~input_o  & \a[0]~input_o )) # (\b[0]~input_o  & ((\a[0]~input_o ) # (\op_sel[0]~input_o ))))) # (\op_sel[1]~input_o  & (!\a[0]~input_o  $ (((!\b[0]~input_o  & 
// !\op_sel[0]~input_o )))))

	.dataa(!\b[0]~input_o ),
	.datab(!\op_sel[1]~input_o ),
	.datac(!\op_sel[0]~input_o ),
	.datad(!\a[0]~input_o ),
	.datae(gnd),
	.dataf(gnd),
	.datag(gnd),
	.cin(gnd),
	.sharein(gnd),
	.combout(\m1|Mux3~0_combout ),
	.sumout(),
	.cout(),
	.shareout());
// synopsys translate_off
defparam \m1|Mux3~0 .extended_lut = "off";
defparam \m1|Mux3~0 .lut_mask = 64'h176C176C176C176C;
defparam \m1|Mux3~0 .shared_arith = "off";
// synopsys translate_on

cyclonev_io_ibuf \b[1]~input (
	.i(b[1]),
	.ibar(gnd),
	.dynamicterminationcontrol(gnd),
	.o(\b[1]~input_o ));
// synopsys translate_off
defparam \b[1]~input .bus_hold = "false";
defparam \b[1]~input .simulate_z_as = "z";
// synopsys translate_on

cyclonev_io_ibuf \a[1]~input (
	.i(a[1]),
	.ibar(gnd),
	.dynamicterminationcontrol(gnd),
	.o(\a[1]~input_o ));
// synopsys translate_off
defparam \a[1]~input .bus_hold = "false";
defparam \a[1]~input .simulate_z_as = "z";
// synopsys translate_on

cyclonev_lcell_comb \m1|Mux2~0 (
// Equation(s):
// \m1|Mux2~0_combout  = (!\op_sel[1]~input_o  & ((!\b[1]~input_o  & (\op_sel[0]~input_o  & \a[1]~input_o )) # (\b[1]~input_o  & ((\a[1]~input_o ) # (\op_sel[0]~input_o ))))) # (\op_sel[1]~input_o  & (!\a[1]~input_o  $ (((!\b[1]~input_o  & 
// !\op_sel[0]~input_o )))))

	.dataa(!\b[1]~input_o ),
	.datab(!\op_sel[1]~input_o ),
	.datac(!\op_sel[0]~input_o ),
	.datad(!\a[1]~input_o ),
	.datae(gnd),
	.dataf(gnd),
	.datag(gnd),
	.cin(gnd),
	.sharein(gnd),
	.combout(\m1|Mux2~0_combout ),
	.sumout(),
	.cout(),
	.shareout());
// synopsys translate_off
defparam \m1|Mux2~0 .extended_lut = "off";
defparam \m1|Mux2~0 .lut_mask = 64'h176C176C176C176C;
defparam \m1|Mux2~0 .shared_arith = "off";
// synopsys translate_on

cyclonev_io_ibuf \b[2]~input (
	.i(b[2]),
	.ibar(gnd),
	.dynamicterminationcontrol(gnd),
	.o(\b[2]~input_o ));
// synopsys translate_off
defparam \b[2]~input .bus_hold = "false";
defparam \b[2]~input .simulate_z_as = "z";
// synopsys translate_on

cyclonev_io_ibuf \a[2]~input (
	.i(a[2]),
	.ibar(gnd),
	.dynamicterminationcontrol(gnd),
	.o(\a[2]~input_o ));
// synopsys translate_off
defparam \a[2]~input .bus_hold = "false";
defparam \a[2]~input .simulate_z_as = "z";
// synopsys translate_on

cyclonev_lcell_comb \m1|Mux1~0 (
// Equation(s):
// \m1|Mux1~0_combout  = (!\op_sel[1]~input_o  & ((!\b[2]~input_o  & (\op_sel[0]~input_o  & \a[2]~input_o )) # (\b[2]~input_o  & ((\a[2]~input_o ) # (\op_sel[0]~input_o ))))) # (\op_sel[1]~input_o  & (!\a[2]~input_o  $ (((!\b[2]~input_o  & 
// !\op_sel[0]~input_o )))))

	.dataa(!\b[2]~input_o ),
	.datab(!\op_sel[1]~input_o ),
	.datac(!\op_sel[0]~input_o ),
	.datad(!\a[2]~input_o ),
	.datae(gnd),
	.dataf(gnd),
	.datag(gnd),
	.cin(gnd),
	.sharein(gnd),
	.combout(\m1|Mux1~0_combout ),
	.sumout(),
	.cout(),
	.shareout());
// synopsys translate_off
defparam \m1|Mux1~0 .extended_lut = "off";
defparam \m1|Mux1~0 .lut_mask = 64'h176C176C176C176C;
defparam \m1|Mux1~0 .shared_arith = "off";
// synopsys translate_on

cyclonev_io_ibuf \b[3]~input (
	.i(b[3]),
	.ibar(gnd),
	.dynamicterminationcontrol(gnd),
	.o(\b[3]~input_o ));
// synopsys translate_off
defparam \b[3]~input .bus_hold = "false";
defparam \b[3]~input .simulate_z_as = "z";
// synopsys translate_on

cyclonev_io_ibuf \a[3]~input (
	.i(a[3]),
	.ibar(gnd),
	.dynamicterminationcontrol(gnd),
	.o(\a[3]~input_o ));
// synopsys translate_off
defparam \a[3]~input .bus_hold = "false";
defparam \a[3]~input .simulate_z_as = "z";
// synopsys translate_on

cyclonev_lcell_comb \m1|Mux0~0 (
// Equation(s):
// \m1|Mux0~0_combout  = (!\op_sel[1]~input_o  & ((!\b[3]~input_o  & (\op_sel[0]~input_o  & \a[3]~input_o )) # (\b[3]~input_o  & ((\a[3]~input_o ) # (\op_sel[0]~input_o ))))) # (\op_sel[1]~input_o  & (!\a[3]~input_o  $ (((!\b[3]~input_o  & 
// !\op_sel[0]~input_o )))))

	.dataa(!\b[3]~input_o ),
	.datab(!\op_sel[1]~input_o ),
	.datac(!\op_sel[0]~input_o ),
	.datad(!\a[3]~input_o ),
	.datae(gnd),
	.dataf(gnd),
	.datag(gnd),
	.cin(gnd),
	.sharein(gnd),
	.combout(\m1|Mux0~0_combout ),
	.sumout(),
	.cout(),
	.shareout());
// synopsys translate_off
defparam \m1|Mux0~0 .extended_lut = "off";
defparam \m1|Mux0~0 .lut_mask = 64'h176C176C176C176C;
defparam \m1|Mux0~0 .shared_arith = "off";
// synopsys translate_on

assign send[0] = \send[0]~output_o ;

assign send[1] = \send[1]~output_o ;

assign send[2] = \send[2]~output_o ;

assign send[3] = \send[3]~output_o ;

endmodule
