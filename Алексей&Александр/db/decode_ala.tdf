--lpm_decode CBX_DECLARE_ALL_CONNECTED_PORTS="OFF" DEVICE_FAMILY="Cyclone V" LPM_DECODES=5 LPM_WIDTH=3 data enable eq
--VERSION_BEGIN 16.0 cbx_cycloneii 2016:04:27:18:05:34:SJ cbx_lpm_add_sub 2016:04:27:18:05:34:SJ cbx_lpm_compare 2016:04:27:18:05:34:SJ cbx_lpm_decode 2016:04:27:18:05:34:SJ cbx_mgl 2016:04:27:18:06:48:SJ cbx_nadder 2016:04:27:18:05:34:SJ cbx_stratix 2016:04:27:18:05:34:SJ cbx_stratixii 2016:04:27:18:05:34:SJ  VERSION_END


-- Copyright (C) 1991-2016 Altera Corporation. All rights reserved.
--  Your use of Altera Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Altera Program License 
--  Subscription Agreement, the Altera Quartus Prime License Agreement,
--  the Altera MegaCore Function License Agreement, or other 
--  applicable license agreement, including, without limitation, 
--  that your use is for the sole purpose of programming logic 
--  devices manufactured by Altera and sold by Altera or its 
--  authorized distributors.  Please refer to the applicable 
--  agreement for further details.



--synthesis_resources = lut 8 
SUBDESIGN decode_ala
( 
	data[2..0]	:	input;
	enable	:	input;
	eq[4..0]	:	output;
) 
VARIABLE 
	data_wire[2..0]	: WIRE;
	enable_wire	: WIRE;
	eq_node[4..0]	: WIRE;
	eq_wire[7..0]	: WIRE;
	w_anode1047w[3..0]	: WIRE;
	w_anode1064w[3..0]	: WIRE;
	w_anode1074w[3..0]	: WIRE;
	w_anode1084w[3..0]	: WIRE;
	w_anode1094w[3..0]	: WIRE;
	w_anode1104w[3..0]	: WIRE;
	w_anode1114w[3..0]	: WIRE;
	w_anode1124w[3..0]	: WIRE;

BEGIN 
	data_wire[] = data[];
	enable_wire = enable;
	eq[] = eq_node[];
	eq_node[4..0] = eq_wire[4..0];
	eq_wire[] = ( w_anode1124w[3..3], w_anode1114w[3..3], w_anode1104w[3..3], w_anode1094w[3..3], w_anode1084w[3..3], w_anode1074w[3..3], w_anode1064w[3..3], w_anode1047w[3..3]);
	w_anode1047w[] = ( (w_anode1047w[2..2] & (! data_wire[2..2])), (w_anode1047w[1..1] & (! data_wire[1..1])), (w_anode1047w[0..0] & (! data_wire[0..0])), enable_wire);
	w_anode1064w[] = ( (w_anode1064w[2..2] & (! data_wire[2..2])), (w_anode1064w[1..1] & (! data_wire[1..1])), (w_anode1064w[0..0] & data_wire[0..0]), enable_wire);
	w_anode1074w[] = ( (w_anode1074w[2..2] & (! data_wire[2..2])), (w_anode1074w[1..1] & data_wire[1..1]), (w_anode1074w[0..0] & (! data_wire[0..0])), enable_wire);
	w_anode1084w[] = ( (w_anode1084w[2..2] & (! data_wire[2..2])), (w_anode1084w[1..1] & data_wire[1..1]), (w_anode1084w[0..0] & data_wire[0..0]), enable_wire);
	w_anode1094w[] = ( (w_anode1094w[2..2] & data_wire[2..2]), (w_anode1094w[1..1] & (! data_wire[1..1])), (w_anode1094w[0..0] & (! data_wire[0..0])), enable_wire);
	w_anode1104w[] = ( (w_anode1104w[2..2] & data_wire[2..2]), (w_anode1104w[1..1] & (! data_wire[1..1])), (w_anode1104w[0..0] & data_wire[0..0]), enable_wire);
	w_anode1114w[] = ( (w_anode1114w[2..2] & data_wire[2..2]), (w_anode1114w[1..1] & data_wire[1..1]), (w_anode1114w[0..0] & (! data_wire[0..0])), enable_wire);
	w_anode1124w[] = ( (w_anode1124w[2..2] & data_wire[2..2]), (w_anode1124w[1..1] & data_wire[1..1]), (w_anode1124w[0..0] & data_wire[0..0]), enable_wire);
END;
--VALID FILE
