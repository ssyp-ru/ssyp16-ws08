// Copyright (C) 1991-2016 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "07/22/2016 15:05:30"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          datapath
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module datapath_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [3:0] A_SEL;
reg [3:0] B_SEL;
reg CLK;
reg [15:0] CONST_IN;
reg CONST_SEL;
reg [15:0] DATA_IN;
reg DATA_SEL;
reg [3:0] DEST_SEL;
reg LOAD_EN;
reg [3:0] OP_SEL;
// wires                                               
wire [15:0] AROUND;
wire [15:0] A_OUT;
wire [15:0] B_OUT;
wire Z;

// assign statements (if any)                          
datapath i1 (
// port map - connection between master ports and signals/registers   
	.AROUND(AROUND),
	.A_OUT(A_OUT),
	.A_SEL(A_SEL),
	.B_OUT(B_OUT),
	.B_SEL(B_SEL),
	.CLK(CLK),
	.CONST_IN(CONST_IN),
	.CONST_SEL(CONST_SEL),
	.DATA_IN(DATA_IN),
	.DATA_SEL(DATA_SEL),
	.DEST_SEL(DEST_SEL),
	.LOAD_EN(LOAD_EN),
	.OP_SEL(OP_SEL),
	.Z(Z)
);
initial 
begin 
#1000000 $finish;
end 
// A_SEL[ 3 ]
initial
begin
	A_SEL[3] = 1'b0;
	A_SEL[3] = #100000 1'b1;
	A_SEL[3] = #50000 1'b0;
	A_SEL[3] = #100000 1'b1;
	A_SEL[3] = #100000 1'b0;
	A_SEL[3] = #150000 1'b1;
	A_SEL[3] = #50000 1'b0;
	A_SEL[3] = #50000 1'b1;
end 
// A_SEL[ 2 ]
initial
begin
	A_SEL[2] = 1'b0;
	A_SEL[2] = #100000 1'b1;
	A_SEL[2] = #50000 1'b0;
	A_SEL[2] = #50000 1'b1;
	A_SEL[2] = #50000 1'b0;
	A_SEL[2] = #100000 1'b1;
	A_SEL[2] = #150000 1'b0;
	A_SEL[2] = #50000 1'b1;
	A_SEL[2] = #50000 1'b0;
	A_SEL[2] = #50000 1'b1;
	A_SEL[2] = #50000 1'b0;
	A_SEL[2] = #100000 1'b1;
	A_SEL[2] = #150000 1'b0;
end 
// A_SEL[ 1 ]
initial
begin
	A_SEL[1] = 1'b1;
	A_SEL[1] = #50000 1'b0;
	A_SEL[1] = #100000 1'b1;
	A_SEL[1] = #50000 1'b0;
	A_SEL[1] = #100000 1'b1;
	A_SEL[1] = #200000 1'b0;
	A_SEL[1] = #50000 1'b1;
	A_SEL[1] = #50000 1'b0;
	A_SEL[1] = #200000 1'b1;
	A_SEL[1] = #50000 1'b0;
	A_SEL[1] = #50000 1'b1;
end 
// A_SEL[ 0 ]
initial
begin
	A_SEL[0] = 1'b1;
	A_SEL[0] = #50000 1'b0;
	A_SEL[0] = #50000 1'b1;
	A_SEL[0] = #50000 1'b0;
	A_SEL[0] = #50000 1'b1;
	A_SEL[0] = #150000 1'b0;
	A_SEL[0] = #100000 1'b1;
	A_SEL[0] = #50000 1'b0;
	A_SEL[0] = #150000 1'b1;
	A_SEL[0] = #50000 1'b0;
	A_SEL[0] = #150000 1'b1;
	A_SEL[0] = #50000 1'b0;
	A_SEL[0] = #50000 1'b1;
end 
// B_SEL[ 3 ]
initial
begin
	B_SEL[3] = 1'b0;
	B_SEL[3] = #100000 1'b1;
	B_SEL[3] = #150000 1'b0;
	B_SEL[3] = #150000 1'b1;
	B_SEL[3] = #100000 1'b0;
	B_SEL[3] = #50000 1'b1;
	B_SEL[3] = #150000 1'b0;
	B_SEL[3] = #50000 1'b1;
end 
// B_SEL[ 2 ]
initial
begin
	B_SEL[2] = 1'b1;
	B_SEL[2] = #100000 1'b0;
	B_SEL[2] = #200000 1'b1;
	B_SEL[2] = #50000 1'b0;
	B_SEL[2] = #50000 1'b1;
	B_SEL[2] = #50000 1'b0;
	B_SEL[2] = #50000 1'b1;
	B_SEL[2] = #50000 1'b0;
end 
// B_SEL[ 1 ]
initial
begin
	B_SEL[1] = 1'b1;
	B_SEL[1] = #100000 1'b0;
	B_SEL[1] = #50000 1'b1;
	B_SEL[1] = #200000 1'b0;
	B_SEL[1] = #50000 1'b1;
	B_SEL[1] = #50000 1'b0;
	B_SEL[1] = #50000 1'b1;
	B_SEL[1] = #300000 1'b0;
	B_SEL[1] = #100000 1'b1;
	B_SEL[1] = #50000 1'b0;
end 
// B_SEL[ 0 ]
initial
begin
	B_SEL[0] = 1'b1;
	B_SEL[0] = #50000 1'b0;
	B_SEL[0] = #100000 1'b1;
	B_SEL[0] = #100000 1'b0;
	B_SEL[0] = #50000 1'b1;
	B_SEL[0] = #50000 1'b0;
	B_SEL[0] = #50000 1'b1;
	B_SEL[0] = #50000 1'b0;
	B_SEL[0] = #50000 1'b1;
	B_SEL[0] = #50000 1'b0;
	B_SEL[0] = #100000 1'b1;
	B_SEL[0] = #100000 1'b0;
	B_SEL[0] = #50000 1'b1;
	B_SEL[0] = #100000 1'b0;
	B_SEL[0] = #50000 1'b1;
end 

// CLK
initial
begin
	CLK = 1'b0;
	CLK = #5000 1'b1;
	CLK = #20000 1'b0;
	CLK = #10000 1'b1;
	CLK = #30000 1'b0;
	CLK = #5000 1'b1;
	CLK = #15000 1'b0;
	CLK = #10000 1'b1;
	CLK = #10000 1'b0;
	CLK = #5000 1'b1;
	CLK = #5000 1'b0;
	CLK = #5000 1'b1;
	CLK = #30000 1'b0;
	CLK = #15000 1'b1;
	CLK = #5000 1'b0;
	CLK = #10000 1'b1;
	CLK = #5000 1'b0;
	CLK = #10000 1'b1;
	CLK = #10000 1'b0;
	CLK = #10000 1'b1;
	CLK = #5000 1'b0;
	CLK = #25000 1'b1;
	CLK = #20000 1'b0;
	CLK = #5000 1'b1;
	CLK = #5000 1'b0;
	CLK = #5000 1'b1;
	CLK = #10000 1'b0;
	CLK = #5000 1'b1;
	CLK = #10000 1'b0;
	CLK = #10000 1'b1;
	CLK = #10000 1'b0;
	CLK = #15000 1'b1;
	CLK = #5000 1'b0;
	CLK = #25000 1'b1;
	CLK = #5000 1'b0;
	CLK = #5000 1'b1;
	CLK = #5000 1'b0;
	CLK = #5000 1'b1;
	CLK = #5000 1'b0;
	CLK = #5000 1'b1;
	CLK = #25000 1'b0;
	CLK = #10000 1'b1;
	CLK = #5000 1'b0;
	CLK = #15000 1'b1;
	CLK = #30000 1'b0;
	CLK = #15000 1'b1;
	CLK = #5000 1'b0;
	CLK = #5000 1'b1;
	CLK = #5000 1'b0;
	CLK = #10000 1'b1;
	CLK = #10000 1'b0;
	CLK = #10000 1'b1;
	CLK = #10000 1'b0;
	CLK = #5000 1'b1;
	CLK = #5000 1'b0;
	CLK = #35000 1'b1;
	CLK = #35000 1'b0;
	CLK = #5000 1'b1;
	CLK = #5000 1'b0;
	CLK = #5000 1'b1;
	CLK = #5000 1'b0;
	CLK = #10000 1'b1;
	CLK = #10000 1'b0;
	CLK = #5000 1'b1;
	CLK = #10000 1'b0;
	CLK = #10000 1'b1;
	CLK = #5000 1'b0;
	CLK = #10000 1'b1;
	CLK = #5000 1'b0;
	CLK = #10000 1'b1;
	CLK = #10000 1'b0;
	CLK = #5000 1'b1;
	CLK = #5000 1'b0;
	CLK = #25000 1'b1;
	CLK = #35000 1'b0;
	CLK = #15000 1'b1;
	CLK = #5000 1'b0;
	CLK = #5000 1'b1;
	CLK = #5000 1'b0;
	CLK = #15000 1'b1;
	CLK = #10000 1'b0;
	CLK = #5000 1'b1;
	CLK = #5000 1'b0;
	CLK = #10000 1'b1;
	CLK = #5000 1'b0;
	CLK = #15000 1'b1;
	CLK = #5000 1'b0;
	CLK = #5000 1'b1;
	CLK = #15000 1'b0;
	CLK = #10000 1'b1;
	CLK = #15000 1'b0;
	CLK = #5000 1'b1;
	CLK = #10000 1'b0;
	CLK = #25000 1'b1;
end 
// CONST_IN[ 15 ]
initial
begin
	CONST_IN[15] = 1'b1;
	CONST_IN[15] = #250000 1'b0;
	CONST_IN[15] = #100000 1'b1;
	CONST_IN[15] = #100000 1'b0;
	CONST_IN[15] = #100000 1'b1;
	CONST_IN[15] = #100000 1'b0;
	CONST_IN[15] = #100000 1'b1;
	CONST_IN[15] = #200000 1'b0;
end 
// CONST_IN[ 14 ]
initial
begin
	CONST_IN[14] = 1'b1;
	CONST_IN[14] = #150000 1'b0;
	CONST_IN[14] = #100000 1'b1;
	CONST_IN[14] = #150000 1'b0;
	CONST_IN[14] = #150000 1'b1;
	CONST_IN[14] = #50000 1'b0;
	CONST_IN[14] = #50000 1'b1;
	CONST_IN[14] = #50000 1'b0;
	CONST_IN[14] = #100000 1'b1;
	CONST_IN[14] = #150000 1'b0;
end 
// CONST_IN[ 13 ]
initial
begin
	CONST_IN[13] = 1'b0;
	CONST_IN[13] = #100000 1'b1;
	CONST_IN[13] = #150000 1'b0;
	CONST_IN[13] = #100000 1'b1;
	CONST_IN[13] = #50000 1'b0;
	CONST_IN[13] = #350000 1'b1;
	CONST_IN[13] = #50000 1'b0;
	CONST_IN[13] = #50000 1'b1;
	CONST_IN[13] = #50000 1'b0;
	CONST_IN[13] = #50000 1'b1;
end 
// CONST_IN[ 12 ]
initial
begin
	CONST_IN[12] = 1'b0;
	CONST_IN[12] = #250000 1'b1;
	CONST_IN[12] = #50000 1'b0;
	CONST_IN[12] = #50000 1'b1;
	CONST_IN[12] = #50000 1'b0;
	CONST_IN[12] = #100000 1'b1;
	CONST_IN[12] = #50000 1'b0;
	CONST_IN[12] = #50000 1'b1;
	CONST_IN[12] = #50000 1'b0;
	CONST_IN[12] = #50000 1'b1;
	CONST_IN[12] = #50000 1'b0;
	CONST_IN[12] = #50000 1'b1;
	CONST_IN[12] = #50000 1'b0;
	CONST_IN[12] = #50000 1'b1;
end 
// CONST_IN[ 11 ]
initial
begin
	CONST_IN[11] = 1'b0;
	CONST_IN[11] = #200000 1'b1;
	CONST_IN[11] = #50000 1'b0;
	CONST_IN[11] = #50000 1'b1;
	CONST_IN[11] = #50000 1'b0;
	CONST_IN[11] = #150000 1'b1;
	CONST_IN[11] = #50000 1'b0;
	CONST_IN[11] = #150000 1'b1;
	CONST_IN[11] = #100000 1'b0;
	CONST_IN[11] = #50000 1'b1;
	CONST_IN[11] = #50000 1'b0;
end 
// CONST_IN[ 10 ]
initial
begin
	CONST_IN[10] = 1'b1;
	CONST_IN[10] = #150000 1'b0;
	CONST_IN[10] = #100000 1'b1;
	CONST_IN[10] = #150000 1'b0;
	CONST_IN[10] = #100000 1'b1;
	CONST_IN[10] = #50000 1'b0;
	CONST_IN[10] = #100000 1'b1;
	CONST_IN[10] = #100000 1'b0;
	CONST_IN[10] = #50000 1'b1;
	CONST_IN[10] = #50000 1'b0;
end 
// CONST_IN[ 9 ]
initial
begin
	CONST_IN[9] = 1'b1;
	CONST_IN[9] = #50000 1'b0;
	CONST_IN[9] = #50000 1'b1;
	CONST_IN[9] = #50000 1'b0;
	CONST_IN[9] = #150000 1'b1;
	CONST_IN[9] = #100000 1'b0;
	CONST_IN[9] = #50000 1'b1;
	CONST_IN[9] = #50000 1'b0;
	CONST_IN[9] = #100000 1'b1;
	CONST_IN[9] = #200000 1'b0;
	CONST_IN[9] = #100000 1'b1;
end 
// CONST_IN[ 8 ]
initial
begin
	CONST_IN[8] = 1'b1;
	CONST_IN[8] = #50000 1'b0;
	CONST_IN[8] = #50000 1'b1;
	CONST_IN[8] = #350000 1'b0;
	CONST_IN[8] = #50000 1'b1;
	CONST_IN[8] = #50000 1'b0;
	CONST_IN[8] = #50000 1'b1;
	CONST_IN[8] = #100000 1'b0;
	CONST_IN[8] = #200000 1'b1;
	CONST_IN[8] = #50000 1'b0;
end 
// CONST_IN[ 7 ]
initial
begin
	CONST_IN[7] = 1'b1;
	CONST_IN[7] = #50000 1'b0;
	CONST_IN[7] = #250000 1'b1;
	CONST_IN[7] = #300000 1'b0;
	CONST_IN[7] = #100000 1'b1;
	CONST_IN[7] = #50000 1'b0;
	CONST_IN[7] = #50000 1'b1;
	CONST_IN[7] = #50000 1'b0;
	CONST_IN[7] = #100000 1'b1;
end 
// CONST_IN[ 6 ]
initial
begin
	CONST_IN[6] = 1'b0;
	CONST_IN[6] = #100000 1'b1;
	CONST_IN[6] = #250000 1'b0;
	CONST_IN[6] = #150000 1'b1;
	CONST_IN[6] = #100000 1'b0;
	CONST_IN[6] = #100000 1'b1;
	CONST_IN[6] = #200000 1'b0;
	CONST_IN[6] = #50000 1'b1;
end 
// CONST_IN[ 5 ]
initial
begin
	CONST_IN[5] = 1'b0;
	CONST_IN[5] = #50000 1'b1;
	CONST_IN[5] = #50000 1'b0;
	CONST_IN[5] = #50000 1'b1;
	CONST_IN[5] = #50000 1'b0;
	CONST_IN[5] = #50000 1'b1;
	CONST_IN[5] = #350000 1'b0;
	CONST_IN[5] = #200000 1'b1;
	CONST_IN[5] = #100000 1'b0;
	CONST_IN[5] = #50000 1'b1;
end 
// CONST_IN[ 4 ]
initial
begin
	CONST_IN[4] = 1'b1;
	CONST_IN[4] = #100000 1'b0;
	CONST_IN[4] = #50000 1'b1;
	CONST_IN[4] = #200000 1'b0;
	CONST_IN[4] = #150000 1'b1;
	CONST_IN[4] = #50000 1'b0;
	CONST_IN[4] = #250000 1'b1;
	CONST_IN[4] = #100000 1'b0;
	CONST_IN[4] = #50000 1'b1;
end 
// CONST_IN[ 3 ]
initial
begin
	CONST_IN[3] = 1'b1;
	CONST_IN[3] = #50000 1'b0;
	CONST_IN[3] = #50000 1'b1;
	CONST_IN[3] = #150000 1'b0;
	CONST_IN[3] = #200000 1'b1;
	CONST_IN[3] = #100000 1'b0;
	CONST_IN[3] = #50000 1'b1;
	CONST_IN[3] = #100000 1'b0;
	CONST_IN[3] = #50000 1'b1;
	CONST_IN[3] = #50000 1'b0;
	CONST_IN[3] = #50000 1'b1;
	CONST_IN[3] = #50000 1'b0;
	CONST_IN[3] = #50000 1'b1;
end 
// CONST_IN[ 2 ]
initial
begin
	CONST_IN[2] = 1'b1;
	CONST_IN[2] = #50000 1'b0;
	CONST_IN[2] = #100000 1'b1;
	CONST_IN[2] = #100000 1'b0;
	CONST_IN[2] = #200000 1'b1;
	CONST_IN[2] = #100000 1'b0;
	CONST_IN[2] = #100000 1'b1;
	CONST_IN[2] = #100000 1'b0;
	CONST_IN[2] = #200000 1'b1;
end 
// CONST_IN[ 1 ]
initial
begin
	CONST_IN[1] = 1'b1;
	CONST_IN[1] = #200000 1'b0;
	CONST_IN[1] = #50000 1'b1;
	CONST_IN[1] = #100000 1'b0;
	CONST_IN[1] = #150000 1'b1;
	CONST_IN[1] = #100000 1'b0;
	CONST_IN[1] = #50000 1'b1;
	CONST_IN[1] = #150000 1'b0;
	CONST_IN[1] = #50000 1'b1;
	CONST_IN[1] = #50000 1'b0;
end 
// CONST_IN[ 0 ]
initial
begin
	CONST_IN[0] = 1'b0;
	CONST_IN[0] = #100000 1'b1;
	CONST_IN[0] = #150000 1'b0;
	CONST_IN[0] = #100000 1'b1;
	CONST_IN[0] = #50000 1'b0;
	CONST_IN[0] = #250000 1'b1;
	CONST_IN[0] = #50000 1'b0;
	CONST_IN[0] = #50000 1'b1;
	CONST_IN[0] = #100000 1'b0;
	CONST_IN[0] = #100000 1'b1;
end 

// CONST_SEL
initial
begin
	CONST_SEL = 1'b0;
	CONST_SEL = #50000 1'b1;
	CONST_SEL = #200000 1'b0;
	CONST_SEL = #50000 1'b1;
	CONST_SEL = #50000 1'b0;
	CONST_SEL = #100000 1'b1;
	CONST_SEL = #50000 1'b0;
	CONST_SEL = #50000 1'b1;
	CONST_SEL = #50000 1'b0;
	CONST_SEL = #50000 1'b1;
	CONST_SEL = #50000 1'b0;
	CONST_SEL = #50000 1'b1;
	CONST_SEL = #150000 1'b0;
end 
// DATA_IN[ 15 ]
initial
begin
	DATA_IN[15] = 1'b1;
	DATA_IN[15] = #100000 1'b0;
	DATA_IN[15] = #50000 1'b1;
	DATA_IN[15] = #150000 1'b0;
	DATA_IN[15] = #50000 1'b1;
	DATA_IN[15] = #50000 1'b0;
	DATA_IN[15] = #150000 1'b1;
	DATA_IN[15] = #100000 1'b0;
	DATA_IN[15] = #50000 1'b1;
	DATA_IN[15] = #50000 1'b0;
	DATA_IN[15] = #50000 1'b1;
end 
// DATA_IN[ 14 ]
initial
begin
	DATA_IN[14] = 1'b0;
	DATA_IN[14] = #100000 1'b1;
	DATA_IN[14] = #50000 1'b0;
	DATA_IN[14] = #300000 1'b1;
	DATA_IN[14] = #50000 1'b0;
	DATA_IN[14] = #100000 1'b1;
	DATA_IN[14] = #150000 1'b0;
	DATA_IN[14] = #50000 1'b1;
	DATA_IN[14] = #50000 1'b0;
	DATA_IN[14] = #100000 1'b1;
end 
// DATA_IN[ 13 ]
initial
begin
	DATA_IN[13] = 1'b1;
	DATA_IN[13] = #100000 1'b0;
	DATA_IN[13] = #50000 1'b1;
	DATA_IN[13] = #150000 1'b0;
	DATA_IN[13] = #100000 1'b1;
	DATA_IN[13] = #200000 1'b0;
	DATA_IN[13] = #150000 1'b1;
	DATA_IN[13] = #50000 1'b0;
	DATA_IN[13] = #50000 1'b1;
	DATA_IN[13] = #100000 1'b0;
end 
// DATA_IN[ 12 ]
initial
begin
	DATA_IN[12] = 1'b1;
	DATA_IN[12] = #150000 1'b0;
	DATA_IN[12] = #50000 1'b1;
	DATA_IN[12] = #50000 1'b0;
	DATA_IN[12] = #50000 1'b1;
	DATA_IN[12] = #100000 1'b0;
	DATA_IN[12] = #50000 1'b1;
	DATA_IN[12] = #50000 1'b0;
	DATA_IN[12] = #50000 1'b1;
	DATA_IN[12] = #50000 1'b0;
	DATA_IN[12] = #250000 1'b1;
end 
// DATA_IN[ 11 ]
initial
begin
	DATA_IN[11] = 1'b0;
	DATA_IN[11] = #100000 1'b1;
	DATA_IN[11] = #150000 1'b0;
	DATA_IN[11] = #50000 1'b1;
	DATA_IN[11] = #50000 1'b0;
	DATA_IN[11] = #100000 1'b1;
	DATA_IN[11] = #250000 1'b0;
	DATA_IN[11] = #200000 1'b1;
end 
// DATA_IN[ 10 ]
initial
begin
	DATA_IN[10] = 1'b0;
	DATA_IN[10] = #100000 1'b1;
	DATA_IN[10] = #50000 1'b0;
	DATA_IN[10] = #50000 1'b1;
	DATA_IN[10] = #100000 1'b0;
	DATA_IN[10] = #350000 1'b1;
	DATA_IN[10] = #50000 1'b0;
	DATA_IN[10] = #150000 1'b1;
	DATA_IN[10] = #50000 1'b0;
	DATA_IN[10] = #50000 1'b1;
end 
// DATA_IN[ 9 ]
initial
begin
	DATA_IN[9] = 1'b0;
	DATA_IN[9] = #50000 1'b1;
	DATA_IN[9] = #100000 1'b0;
	DATA_IN[9] = #50000 1'b1;
	DATA_IN[9] = #100000 1'b0;
	DATA_IN[9] = #150000 1'b1;
	DATA_IN[9] = #50000 1'b0;
	DATA_IN[9] = #50000 1'b1;
	DATA_IN[9] = #100000 1'b0;
	DATA_IN[9] = #50000 1'b1;
	DATA_IN[9] = #100000 1'b0;
	DATA_IN[9] = #100000 1'b1;
	DATA_IN[9] = #50000 1'b0;
end 
// DATA_IN[ 8 ]
initial
begin
	DATA_IN[8] = 1'b1;
	DATA_IN[8] = #100000 1'b0;
	DATA_IN[8] = #100000 1'b1;
	DATA_IN[8] = #400000 1'b0;
	DATA_IN[8] = #50000 1'b1;
	DATA_IN[8] = #250000 1'b0;
end 
// DATA_IN[ 7 ]
initial
begin
	DATA_IN[7] = 1'b1;
	DATA_IN[7] = #50000 1'b0;
	DATA_IN[7] = #50000 1'b1;
	DATA_IN[7] = #150000 1'b0;
	DATA_IN[7] = #50000 1'b1;
	DATA_IN[7] = #50000 1'b0;
	DATA_IN[7] = #100000 1'b1;
	DATA_IN[7] = #50000 1'b0;
	DATA_IN[7] = #50000 1'b1;
	DATA_IN[7] = #100000 1'b0;
	DATA_IN[7] = #100000 1'b1;
	DATA_IN[7] = #100000 1'b0;
	DATA_IN[7] = #50000 1'b1;
	DATA_IN[7] = #50000 1'b0;
end 
// DATA_IN[ 6 ]
initial
begin
	DATA_IN[6] = 1'b0;
	DATA_IN[6] = #350000 1'b1;
	DATA_IN[6] = #150000 1'b0;
	DATA_IN[6] = #100000 1'b1;
	DATA_IN[6] = #200000 1'b0;
	DATA_IN[6] = #50000 1'b1;
	DATA_IN[6] = #50000 1'b0;
end 
// DATA_IN[ 5 ]
initial
begin
	DATA_IN[5] = 1'b1;
	DATA_IN[5] = #50000 1'b0;
	DATA_IN[5] = #50000 1'b1;
	DATA_IN[5] = #100000 1'b0;
	DATA_IN[5] = #50000 1'b1;
	DATA_IN[5] = #100000 1'b0;
	DATA_IN[5] = #150000 1'b1;
	DATA_IN[5] = #50000 1'b0;
	DATA_IN[5] = #100000 1'b1;
	DATA_IN[5] = #50000 1'b0;
	DATA_IN[5] = #50000 1'b1;
	DATA_IN[5] = #100000 1'b0;
	DATA_IN[5] = #100000 1'b1;
end 
// DATA_IN[ 4 ]
initial
begin
	DATA_IN[4] = 1'b0;
	DATA_IN[4] = #100000 1'b1;
	DATA_IN[4] = #50000 1'b0;
	DATA_IN[4] = #100000 1'b1;
	DATA_IN[4] = #50000 1'b0;
	DATA_IN[4] = #150000 1'b1;
	DATA_IN[4] = #50000 1'b0;
	DATA_IN[4] = #250000 1'b1;
	DATA_IN[4] = #50000 1'b0;
	DATA_IN[4] = #50000 1'b1;
	DATA_IN[4] = #50000 1'b0;
end 
// DATA_IN[ 3 ]
initial
begin
	DATA_IN[3] = 1'b0;
	DATA_IN[3] = #50000 1'b1;
	DATA_IN[3] = #50000 1'b0;
	DATA_IN[3] = #200000 1'b1;
	DATA_IN[3] = #450000 1'b0;
	DATA_IN[3] = #150000 1'b1;
end 
// DATA_IN[ 2 ]
initial
begin
	DATA_IN[2] = 1'b1;
	DATA_IN[2] = #50000 1'b0;
	DATA_IN[2] = #50000 1'b1;
	DATA_IN[2] = #50000 1'b0;
	DATA_IN[2] = #200000 1'b1;
	DATA_IN[2] = #50000 1'b0;
	DATA_IN[2] = #50000 1'b1;
	DATA_IN[2] = #50000 1'b0;
	DATA_IN[2] = #50000 1'b1;
	DATA_IN[2] = #200000 1'b0;
	DATA_IN[2] = #100000 1'b1;
	DATA_IN[2] = #50000 1'b0;
end 
// DATA_IN[ 1 ]
initial
begin
	DATA_IN[1] = 1'b0;
	DATA_IN[1] = #250000 1'b1;
	DATA_IN[1] = #100000 1'b0;
	DATA_IN[1] = #50000 1'b1;
	DATA_IN[1] = #50000 1'b0;
	DATA_IN[1] = #50000 1'b1;
	DATA_IN[1] = #50000 1'b0;
	DATA_IN[1] = #100000 1'b1;
	DATA_IN[1] = #200000 1'b0;
	DATA_IN[1] = #50000 1'b1;
	DATA_IN[1] = #50000 1'b0;
end 
// DATA_IN[ 0 ]
initial
begin
	DATA_IN[0] = 1'b0;
	DATA_IN[0] = #50000 1'b1;
	DATA_IN[0] = #50000 1'b0;
	DATA_IN[0] = #50000 1'b1;
	DATA_IN[0] = #50000 1'b0;
	DATA_IN[0] = #50000 1'b1;
	DATA_IN[0] = #350000 1'b0;
	DATA_IN[0] = #50000 1'b1;
	DATA_IN[0] = #50000 1'b0;
	DATA_IN[0] = #50000 1'b1;
	DATA_IN[0] = #50000 1'b0;
	DATA_IN[0] = #100000 1'b1;
end 

// DATA_SEL
initial
begin
	DATA_SEL = 1'b1;
	DATA_SEL = #150000 1'b0;
	DATA_SEL = #150000 1'b1;
	DATA_SEL = #200000 1'b0;
	DATA_SEL = #50000 1'b1;
	DATA_SEL = #50000 1'b0;
	DATA_SEL = #150000 1'b1;
	DATA_SEL = #50000 1'b0;
	DATA_SEL = #150000 1'b1;
end 
// DEST_SEL[ 3 ]
initial
begin
	DEST_SEL[3] = 1'b0;
	DEST_SEL[3] = #50000 1'b1;
	DEST_SEL[3] = #100000 1'b0;
	DEST_SEL[3] = #50000 1'b1;
	DEST_SEL[3] = #200000 1'b0;
	DEST_SEL[3] = #50000 1'b1;
	DEST_SEL[3] = #50000 1'b0;
	DEST_SEL[3] = #250000 1'b1;
	DEST_SEL[3] = #50000 1'b0;
	DEST_SEL[3] = #50000 1'b1;
end 
// DEST_SEL[ 2 ]
initial
begin
	DEST_SEL[2] = 1'b1;
	DEST_SEL[2] = #100000 1'b0;
	DEST_SEL[2] = #50000 1'b1;
	DEST_SEL[2] = #100000 1'b0;
	DEST_SEL[2] = #100000 1'b1;
	DEST_SEL[2] = #50000 1'b0;
	DEST_SEL[2] = #50000 1'b1;
	DEST_SEL[2] = #50000 1'b0;
	DEST_SEL[2] = #50000 1'b1;
	DEST_SEL[2] = #200000 1'b0;
	DEST_SEL[2] = #50000 1'b1;
	DEST_SEL[2] = #100000 1'b0;
	DEST_SEL[2] = #50000 1'b1;
end 
// DEST_SEL[ 1 ]
initial
begin
	DEST_SEL[1] = 1'b1;
	DEST_SEL[1] = #100000 1'b0;
	DEST_SEL[1] = #100000 1'b1;
	DEST_SEL[1] = #200000 1'b0;
	DEST_SEL[1] = #100000 1'b1;
	DEST_SEL[1] = #150000 1'b0;
	DEST_SEL[1] = #150000 1'b1;
end 
// DEST_SEL[ 0 ]
initial
begin
	DEST_SEL[0] = 1'b1;
	DEST_SEL[0] = #150000 1'b0;
	DEST_SEL[0] = #100000 1'b1;
	DEST_SEL[0] = #150000 1'b0;
	DEST_SEL[0] = #50000 1'b1;
	DEST_SEL[0] = #50000 1'b0;
	DEST_SEL[0] = #50000 1'b1;
	DEST_SEL[0] = #150000 1'b0;
	DEST_SEL[0] = #50000 1'b1;
	DEST_SEL[0] = #50000 1'b0;
	DEST_SEL[0] = #150000 1'b1;
end 

// LOAD_EN
initial
begin
	LOAD_EN = 1'b1;
	LOAD_EN = #50000 1'b0;
	LOAD_EN = #50000 1'b1;
	LOAD_EN = #50000 1'b0;
	LOAD_EN = #50000 1'b1;
	LOAD_EN = #150000 1'b0;
	LOAD_EN = #50000 1'b1;
	LOAD_EN = #50000 1'b0;
	LOAD_EN = #50000 1'b1;
	LOAD_EN = #50000 1'b0;
	LOAD_EN = #200000 1'b1;
	LOAD_EN = #50000 1'b0;
	LOAD_EN = #50000 1'b1;
end 
// OP_SEL[ 3 ]
initial
begin
	OP_SEL[3] = 1'b1;
	OP_SEL[3] = #50000 1'b0;
	OP_SEL[3] = #150000 1'b1;
	OP_SEL[3] = #50000 1'b0;
	OP_SEL[3] = #50000 1'b1;
	OP_SEL[3] = #50000 1'b0;
	OP_SEL[3] = #350000 1'b1;
	OP_SEL[3] = #150000 1'b0;
	OP_SEL[3] = #50000 1'b1;
end 
// OP_SEL[ 2 ]
initial
begin
	OP_SEL[2] = 1'b0;
	OP_SEL[2] = #50000 1'b1;
	OP_SEL[2] = #50000 1'b0;
	OP_SEL[2] = #200000 1'b1;
	OP_SEL[2] = #50000 1'b0;
	OP_SEL[2] = #100000 1'b1;
	OP_SEL[2] = #250000 1'b0;
	OP_SEL[2] = #50000 1'b1;
	OP_SEL[2] = #100000 1'b0;
	OP_SEL[2] = #50000 1'b1;
	OP_SEL[2] = #50000 1'b0;
end 
// OP_SEL[ 1 ]
initial
begin
	OP_SEL[1] = 1'b1;
	OP_SEL[1] = #100000 1'b0;
	OP_SEL[1] = #150000 1'b1;
	OP_SEL[1] = #50000 1'b0;
	OP_SEL[1] = #100000 1'b1;
	OP_SEL[1] = #50000 1'b0;
	OP_SEL[1] = #100000 1'b1;
	OP_SEL[1] = #50000 1'b0;
	OP_SEL[1] = #250000 1'b1;
	OP_SEL[1] = #100000 1'b0;
end 
// OP_SEL[ 0 ]
initial
begin
	OP_SEL[0] = 1'b1;
	OP_SEL[0] = #250000 1'b0;
	OP_SEL[0] = #50000 1'b1;
	OP_SEL[0] = #150000 1'b0;
	OP_SEL[0] = #100000 1'b1;
	OP_SEL[0] = #50000 1'b0;
	OP_SEL[0] = #50000 1'b1;
	OP_SEL[0] = #50000 1'b0;
	OP_SEL[0] = #100000 1'b1;
end 
endmodule

