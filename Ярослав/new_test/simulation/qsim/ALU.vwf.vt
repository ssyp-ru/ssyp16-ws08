// Copyright (C) 1991-2016 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "07/21/2016 14:28:48"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          calc1
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module calc1_vlg_vec_tst();
// constants                                           
// general purpose registers
reg SEL;
reg [3:0] X;
reg [3:0] Y;
// wires                                               
wire C;
wire N;
wire V;
wire [3:0] Z;
wire _Z;

// assign statements (if any)                          
calc1 i1 (
// port map - connection between master ports and signals/registers   
	.C(C),
	.N(N),
	.SEL(SEL),
	.V(V),
	.X(X),
	.Y(Y),
	.Z(Z),
	._Z(_Z)
);
initial 
begin 
#1000000 $finish;
end 

// SEL
initial
begin
	SEL = 1'b0;
	SEL = #100000 1'b1;
	SEL = #50000 1'b0;
	SEL = #100000 1'b1;
	SEL = #150000 1'b0;
	SEL = #50000 1'b1;
	SEL = #50000 1'b0;
	SEL = #50000 1'b1;
	SEL = #50000 1'b0;
	SEL = #50000 1'b1;
	SEL = #250000 1'b0;
	SEL = #50000 1'b1;
end 
// X[ 3 ]
initial
begin
	X[3] = 1'b0;
	X[3] = #50000 1'b1;
	X[3] = #50000 1'b0;
	X[3] = #50000 1'b1;
	X[3] = #150000 1'b0;
	X[3] = #350000 1'b1;
	X[3] = #50000 1'b0;
	X[3] = #100000 1'b1;
	X[3] = #50000 1'b0;
	X[3] = #50000 1'b1;
	X[3] = #50000 1'b0;
end 
// X[ 2 ]
initial
begin
	X[2] = 1'b0;
	X[2] = #50000 1'b1;
	X[2] = #100000 1'b0;
	X[2] = #50000 1'b1;
	X[2] = #50000 1'b0;
	X[2] = #50000 1'b1;
	X[2] = #300000 1'b0;
	X[2] = #100000 1'b1;
	X[2] = #50000 1'b0;
	X[2] = #100000 1'b1;
	X[2] = #50000 1'b0;
end 
// X[ 1 ]
initial
begin
	X[1] = 1'b0;
	X[1] = #100000 1'b1;
	X[1] = #50000 1'b0;
	X[1] = #100000 1'b1;
	X[1] = #50000 1'b0;
	X[1] = #150000 1'b1;
	X[1] = #100000 1'b0;
	X[1] = #300000 1'b1;
end 
// X[ 0 ]
initial
begin
	X[0] = 1'b1;
	X[0] = #100000 1'b0;
	X[0] = #150000 1'b1;
	X[0] = #200000 1'b0;
	X[0] = #50000 1'b1;
	X[0] = #100000 1'b0;
	X[0] = #50000 1'b1;
	X[0] = #50000 1'b0;
	X[0] = #50000 1'b1;
end 
// Y[ 3 ]
initial
begin
	Y[3] = 1'b0;
	Y[3] = #50000 1'b1;
	Y[3] = #200000 1'b0;
	Y[3] = #200000 1'b1;
	Y[3] = #100000 1'b0;
	Y[3] = #50000 1'b1;
	Y[3] = #100000 1'b0;
	Y[3] = #250000 1'b1;
end 
// Y[ 2 ]
initial
begin
	Y[2] = 1'b1;
	Y[2] = #50000 1'b0;
	Y[2] = #50000 1'b1;
	Y[2] = #50000 1'b0;
	Y[2] = #150000 1'b1;
	Y[2] = #150000 1'b0;
	Y[2] = #100000 1'b1;
	Y[2] = #50000 1'b0;
	Y[2] = #50000 1'b1;
	Y[2] = #100000 1'b0;
	Y[2] = #50000 1'b1;
end 
// Y[ 1 ]
initial
begin
	Y[1] = 1'b1;
	Y[1] = #100000 1'b0;
	Y[1] = #200000 1'b1;
	Y[1] = #300000 1'b0;
	Y[1] = #50000 1'b1;
	Y[1] = #200000 1'b0;
	Y[1] = #50000 1'b1;
end 
// Y[ 0 ]
initial
begin
	Y[0] = 1'b1;
	Y[0] = #250000 1'b0;
	Y[0] = #150000 1'b1;
	Y[0] = #100000 1'b0;
	Y[0] = #200000 1'b1;
	Y[0] = #50000 1'b0;
	Y[0] = #200000 1'b1;
end 
endmodule

