// Copyright (C) 1991-2016 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "07/22/2016 03:05:50"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          datapath
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module datapath_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [3:0] a_sel;
reg [3:0] b_sel;
reg clk;
reg [15:0] const_in;
reg const_sel;
reg [15:0] data_in;
reg data_sel;
reg [3:0] dest_sel;
reg load_en;
reg [3:0] op_sel;
// wires                                               
wire [15:0] a_out;
wire [15:0] b_out;

// assign statements (if any)                          
datapath i1 (
// port map - connection between master ports and signals/registers   
	.a_out(a_out),
	.a_sel(a_sel),
	.b_out(b_out),
	.b_sel(b_sel),
	.clk(clk),
	.const_in(const_in),
	.const_sel(const_sel),
	.data_in(data_in),
	.data_sel(data_sel),
	.dest_sel(dest_sel),
	.load_en(load_en),
	.op_sel(op_sel)
);
initial 
begin 
#1000000 $finish;
end 
// a_sel[ 3 ]
initial
begin
	a_sel[3] = 1'b0;
end 
// a_sel[ 2 ]
initial
begin
	a_sel[2] = 1'b0;
end 
// a_sel[ 1 ]
initial
begin
	a_sel[1] = 1'b0;
end 
// a_sel[ 0 ]
initial
begin
	a_sel[0] = 1'b1;
	a_sel[0] = #380000 1'b0;
end 
// b_sel[ 3 ]
initial
begin
	b_sel[3] = 1'b0;
end 
// b_sel[ 2 ]
initial
begin
	b_sel[2] = 1'b0;
end 
// b_sel[ 1 ]
initial
begin
	b_sel[1] = 1'b0;
	b_sel[1] = #140000 1'b1;
	b_sel[1] = #240000 1'b0;
end 
// b_sel[ 0 ]
initial
begin
	b_sel[0] = 1'b0;
	b_sel[0] = #140000 1'b1;
	b_sel[0] = #240000 1'b0;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	#10000;
end 
// const_in[ 15 ]
initial
begin
	const_in[15] = 1'b0;
end 
// const_in[ 14 ]
initial
begin
	const_in[14] = 1'b0;
end 
// const_in[ 13 ]
initial
begin
	const_in[13] = 1'b0;
end 
// const_in[ 12 ]
initial
begin
	const_in[12] = 1'b0;
end 
// const_in[ 11 ]
initial
begin
	const_in[11] = 1'b0;
end 
// const_in[ 10 ]
initial
begin
	const_in[10] = 1'b0;
end 
// const_in[ 9 ]
initial
begin
	const_in[9] = 1'b0;
end 
// const_in[ 8 ]
initial
begin
	const_in[8] = 1'b0;
end 
// const_in[ 7 ]
initial
begin
	const_in[7] = 1'b0;
end 
// const_in[ 6 ]
initial
begin
	const_in[6] = 1'b0;
end 
// const_in[ 5 ]
initial
begin
	const_in[5] = 1'b0;
end 
// const_in[ 4 ]
initial
begin
	const_in[4] = 1'b0;
end 
// const_in[ 3 ]
initial
begin
	const_in[3] = 1'b0;
end 
// const_in[ 2 ]
initial
begin
	const_in[2] = 1'b0;
end 
// const_in[ 1 ]
initial
begin
	const_in[1] = 1'b0;
end 
// const_in[ 0 ]
initial
begin
	const_in[0] = 1'b0;
end 

// const_sel
initial
begin
	const_sel = 1'b0;
end 
// data_in[ 15 ]
initial
begin
	data_in[15] = 1'b0;
end 
// data_in[ 14 ]
initial
begin
	data_in[14] = 1'b0;
end 
// data_in[ 13 ]
initial
begin
	data_in[13] = 1'b0;
	data_in[13] = #80000 1'b1;
	data_in[13] = #90000 1'b0;
end 
// data_in[ 12 ]
initial
begin
	data_in[12] = 1'b1;
	data_in[12] = #310000 1'b0;
end 
// data_in[ 11 ]
initial
begin
	data_in[11] = 1'b0;
end 
// data_in[ 10 ]
initial
begin
	data_in[10] = 1'b0;
end 
// data_in[ 9 ]
initial
begin
	data_in[9] = 1'b0;
end 
// data_in[ 8 ]
initial
begin
	data_in[8] = 1'b0;
end 
// data_in[ 7 ]
initial
begin
	data_in[7] = 1'b0;
end 
// data_in[ 6 ]
initial
begin
	data_in[6] = 1'b0;
end 
// data_in[ 5 ]
initial
begin
	data_in[5] = 1'b0;
end 
// data_in[ 4 ]
initial
begin
	data_in[4] = 1'b0;
end 
// data_in[ 3 ]
initial
begin
	data_in[3] = 1'b0;
end 
// data_in[ 2 ]
initial
begin
	data_in[2] = 1'b0;
end 
// data_in[ 1 ]
initial
begin
	data_in[1] = 1'b0;
end 
// data_in[ 0 ]
initial
begin
	data_in[0] = 1'b0;
end 

// data_sel
initial
begin
	data_sel = 1'b1;
	data_sel = #140000 1'b0;
end 
// dest_sel[ 3 ]
initial
begin
	dest_sel[3] = 1'b0;
end 
// dest_sel[ 2 ]
initial
begin
	dest_sel[2] = 1'b0;
end 
// dest_sel[ 1 ]
initial
begin
	dest_sel[1] = 1'b0;
	dest_sel[1] = #70000 1'b1;
	dest_sel[1] = #70000 1'b0;
end 
// dest_sel[ 0 ]
initial
begin
	dest_sel[0] = 1'b1;
	dest_sel[0] = #380000 1'b0;
end 

// load_en
initial
begin
	load_en = 1'b1;
	load_en = #170000 1'b0;
	load_en = #280000 1'b1;
end 
// op_sel[ 3 ]
initial
begin
	op_sel[3] = 1'b0;
end 
// op_sel[ 2 ]
initial
begin
	op_sel[2] = 1'b0;
end 
// op_sel[ 1 ]
initial
begin
	op_sel[1] = 1'b0;
end 
// op_sel[ 0 ]
initial
begin
	op_sel[0] = 1'b0;
end 
endmodule

