// Copyright (C) 1991-2016 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "07/20/2016 00:00:29"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          UNLIMITED_REGISTER
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module UNLIMITED_REGISTER_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [1:0] a_sel;
reg [1:0] b_sel;
reg clk;
reg [3:0] d;
reg [1:0] dest_sel;
reg loat_en;
// wires                                               
wire [3:0] A;
wire [3:0] B;

// assign statements (if any)                          
UNLIMITED_REGISTER i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.B(B),
	.a_sel(a_sel),
	.b_sel(b_sel),
	.clk(clk),
	.d(d),
	.dest_sel(dest_sel),
	.loat_en(loat_en)
);
initial 
begin 
#1000000 $finish;
end 
// a_sel[ 1 ]
initial
begin
	a_sel[1] = 1'b0;
	a_sel[1] = #20000 1'b1;
	a_sel[1] = #190000 1'b0;
end 
// a_sel[ 0 ]
initial
begin
	a_sel[0] = 1'b0;
end 
// b_sel[ 1 ]
initial
begin
	b_sel[1] = 1'b0;
end 
// b_sel[ 0 ]
initial
begin
	b_sel[0] = 1'b0;
	b_sel[0] = #30000 1'b1;
	b_sel[0] = #180000 1'b0;
end 

// clk
initial
begin
	clk = 1'b0;
	clk = #40000 1'b1;
	clk = #30000 1'b0;
end 
// d[ 3 ]
initial
begin
	d[3] = 1'b0;
	d[3] = #30000 1'b1;
	d[3] = #180000 1'b0;
end 
// d[ 2 ]
initial
begin
	d[2] = 1'b0;
end 
// d[ 1 ]
initial
begin
	d[1] = 1'b0;
end 
// d[ 0 ]
initial
begin
	d[0] = 1'b0;
end 
// dest_sel[ 1 ]
initial
begin
	dest_sel[1] = 1'b0;
	dest_sel[1] = #30000 1'b1;
	dest_sel[1] = #180000 1'b0;
end 
// dest_sel[ 0 ]
initial
begin
	dest_sel[0] = 1'b0;
end 

// loat_en
initial
begin
	loat_en = 1'b0;
	loat_en = #30000 1'b1;
	loat_en = #170000 1'b0;
end 
endmodule

